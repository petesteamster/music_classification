hist(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2)
hist(exp(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(sin(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(sin(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+pi))
hist(log(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+pi))
hist(log2(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+pi))
hist(sqrt(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+pi))
hist(sinh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+pi))
hist(exp(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+pi))
hist(exp(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+5))
hist(exp(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+1))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+1))
plot(seq(from=-1,to=1,by=.01))
plot(sinh(seq(from=-1,to=1,by=.01)))
plot((seq(from=-1,to=1,by=.01)))
plot(sinh(seq(from=-1,to=1,by=.01)))
plot(tanh(seq(from=-1,to=1,by=.01)))
plot(tanh(seq(from=-1,to=1,by=.01))+1)
plot(log(seq(from=-1,to=1,by=.01))+1)
plot(log(seq(from=-1,to=1,by=.01)+1))
plot(sinh(seq(from=-1,to=1,by=.01)+1))
plot(tanh(seq(from=-1,to=1,by=.01)+1))
plot(cosh(seq(from=-1,to=1,by=.01)+1))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+1))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+5))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+50))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+10))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+1))
hist(sinh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+1))
hist(sinh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(cosh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(log(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(exp(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(sun(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(sin(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(cos(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
hist(tan(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
plot(tan(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+2))
plot(tan(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))))
hist(tan(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))))
plot(tanh(seq(from=-1,to=1,by=.01)+1))
plot(tan(seq(from=-1,to=1,by=.01)+1))
plot(t(cos(seq(from=-1,to=1,by=.01)+1))
)
plot(t(cos(seq(from=-1,to=1,by=.01)+1)))
plot((cos(seq(from=-1,to=1,by=.01)+1)))
plot(tan(seq(from=-1,to=1,by=.01)+1))
hist(tanh(t_mvnorm[,4]/max(abs(t_mvnorm[,4]))+5))
skew_left=function(tData,tConstant)#
{#
	tD=tanh(t_data[,4]/max(abs(t_data[,4]))+tConstant))#
	return (tD)#
}
skew_left=function(tData,tConstant)#
{#
	tD=tanh(t_data[,4]/max(abs(t_data[,4]))+tConstant)#
	return (tD)#
}
skew_left=function(tData,tConstant)#
{#
	tD=tanh(t_data[,4]/max(abs(t_data))+tConstant)#
	return (tD)#
}
hist(skew_left(t_mvnorm[,4])
hist(skew_left(t_mvnorm[,4]))
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data[,4]/max(abs(t_data))+tConstant)#
	return (tD)#
}
hist(skew_left(t_mvnorm[,4]))
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}
hist(skew_left(t_mvnorm[,4]))
hist(skew_left(t_mvnorm[,4]),1)
hist(skew_left(t_mvnorm[,4],1))
hist(skew_left(t_mvnorm[,4],2))
hist(skew_left(t_mvnorm[,4],0))
hist(skew_left(t_mvnorm[,4],.5))
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
skew_right=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}
hist(skew_right(t_mvnorm[,4],.5))
hist(skew_right(t_mvnorm[,4],1))
hist(skew_right(t_mvnorm[,4],1.5))
bi_modal=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}
bi_modal=function(t_data,tConstant)#
{#
	tD=sin(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}
hist(bi_modal(t_mvnorm[,4],1.5))
hist(bi_modal(t_mvnorm[,4],0))
bi_modal=function(t_data,t_factor)#
{#
	t_data=t_data/max(abs(t_data)*t_factor#
	tD=sin(t_data)#
	return (tD)#
}
bi_modal=function(t_data,t_factor)#
{#
	t_data=t_data/max(abs(t_data))*t_factor#
	tD=sin(t_data)#
	return (tD)#
}
hist(bi_modal(t_mvnorm[,4],0))
hist(bi_modal(t_mvnorm[,4],pi/2))
hist(bi_modal(t_mvnorm[,4],pi))
plot(sin(seq(from=-pi,to=pi,by=.01)))
plot(sin(seq(from=-pi/4,to=pi/4,by=.01)))
hist(skew_right(t_mvnorm[,4],1.5))
plot(sinh(seq(from=-pi,to=pi,by=.01)))
plot(tanh(seq(from=-pi,to=pi,by=.01)))
plot(sinh(seq(from=-pi,to=pi,by=.01)))
plot(cosh(seq(from=-pi,to=pi,by=.01)))
plot(cosh(seq(from=-10,to=10,by=.01)))
plot(sinh(seq(from=-10,to=10,by=.01)))
plot(sinh(seq(from=-1,to=1,by=.01)))
plot(sinh(seq(from=0,to=2,by=.01)))
plot(tanh(seq(from=0,to=2,by=.01)))
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
tLM=lm((x1~skew_right(x2,1)+skew_left(x3,2)+x4+x5,data=as.data.frame(t_m))#
tS=summary(tLM)
tLM=lm((x1~skew_right(x2,1)+skew_left(x3,2)+x4+x5,data=as.data.frame(t_m))
t_m
tLM=lm((x1~skew_left(x3,2)+x4+x5,data=as.data.frame(t_m))#
tS=summary(tLM)
tLM=lm((x1~x2+x3+x4+x5,data=as.data.frame(t_m))
lm((x1~x2+x3+x4+x5,data=as.data.frame(t_m))
t_m
as.data.frame(t_m)
names(as.data.frame(t_m))
tLM=lm((x1~x2+x3+x4+x5,data=data.frame(t_m))
t_data=data.frame(t_m)
tLM=lm(x1~x2+x3+x4+x5,data=t_data)
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~x2+x3+x4+x5,data=t_data)#
tS=summary(tLM)
tS
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+x5,data=t_data)#
tS=summary(tLM)
tS
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*25#
	tD=round(tD)#
	return tD#
}
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return tD#
}
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,30),data=t_data)#
tS=summary(tLM)
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return tD#
}
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,30),data=t_data)#
tS=summary(tLM)
tS
tSrt$x
tSrt$x[2000:3000]
tSrt$ix[3000]
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[16423]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,30),data=t_data)#
tS=summary(tLM)
tS
convert_counts(t_data[,5],25)
convert_counts(t_data[,5],5)
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
tS=summary(tLM)
tS
hist(convert_counts(t_data[,5],5))
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3),convert_counts(t_data$x5,5))
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),convert_counts(t_data$x5,5))
tD[,5]
dim(tD)
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))
tD[,5]
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(3,4),.2)
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
skew_right=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}#
ampute_data<-function(tData,tCols,tProb)#
{#
	 tLen=length(tData[,1])#
	 tAmpData=tData#
	 tCount=round(tLen*tProb)#
	 for(i in tCols)#
	 {#
	 	 t_rows_set_null=sample(c(1:tLen),tCount, replace = FALSE)#
	 	 tAmpData[t_rows_set_null,i]<- NA #
	 }#
	 tR=list()#
	 tR[[1]]=tAmpData#
	 tR[[2]]=tData#
	 names(tR)=c("amp","data")#
	 return (tR)#
}
amp_dt=ampute_data(tD,c(3,4),.2)
amp_dt[,3]
amp_dt$amp[,3]
amp_dt=ampute_data(tD,c(3,4),.2)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)
library(MASS)#
require(MASS)#
library(mice)
amp_dt=ampute_data(tD,c(3,4),.2)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)
names(train)
names(train)=c('x1','x2','x3','x4','x5')
names(train)
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[16423]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.5)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
tSrt[1:10]
tSrt$ix[1:10]
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[6077]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.5)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[6077]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.7)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
tSrt$ix[1:10]
tSrt$x[1:10]
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.7)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
library(MASS)#
require(MASS)#
library(mice)#
#
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
skew_right=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}#
ampute_data<-function(tData,tCols,tProb)#
{#
	 tLen=length(tData[,1])#
	 tAmpData=tData#
	 tCount=round(tLen*tProb)#
	 for(i in tCols)#
	 {#
	 	 t_rows_set_null=sample(c(1:tLen),tCount, replace = FALSE)#
	 	 tAmpData[t_rows_set_null,i]<- NA #
	 }#
	 tR=list()#
	 tR[[1]]=tAmpData#
	 tR[[2]]=tData#
	 names(tR)=c("amp","data")#
	 return (tR)#
}#
#
d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#cor(d) #
tLM=lm(x1~x2+x3+x4+x5,data=d)#
tS=summary(tLM)#
tN=names(tS)#
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
for(i in 1:2000)#
{#
	d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#
    tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
}#
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
library(MASS)#
require(MASS)#
library(mice)#
#
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
skew_right=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}#
ampute_data<-function(tData,tCols,tProb)#
{#
	 tLen=length(tData[,1])#
	 tAmpData=tData#
	 tCount=round(tLen*tProb)#
	 for(i in tCols)#
	 {#
	 	 t_rows_set_null=sample(c(1:tLen),tCount, replace = FALSE)#
	 	 tAmpData[t_rows_set_null,i]<- NA #
	 }#
	 tR=list()#
	 tR[[1]]=tAmpData#
	 tR[[2]]=tData#
	 names(tR)=c("amp","data")#
	 return (tR)#
}#
#
d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#cor(d) #
tLM=lm(x1~x2+x3+x4+x5,data=d)#
tS=summary(tLM)#
tN=names(tS)#
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
for(i in 1:2000)#
{#
	d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#
    tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
}#
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix[1]#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
is.na(amp_dt$amp)
t_na_indexes=which(is.na(amp_dt$amp))
t_na_indexes
hist(tD$x3[t_na_indexes])
tD$x3[t_na_indexes]
tD$x3[1]
tD$x3[2]
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
names(tD)=c('x1','x2','x3','x4','x5')#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)#
t_na_indexes=which(is.na(amp_dt$amp))#
hist(tD$x3[t_na_indexes])
tD$x3[t_na_indexes]
names(train)
hist(train$x3[t_na_indexes])
train$x3[t_na_indexes]
train
train$x3
train$x3[1]
train$x3[2]
is.na(train)
is.na(train$x3)
sum(is.na(train$x3))
dim(am-_dt)
dim(am-_dt$amp)
dim(amp_dt$amp)
t_na_indexes
t_na_indexes=which(is.na(amp_dt$amp$x3))#
hist(train$x3[t_na_indexes])
par(mfrow=c(2,2))#
hist(train$x3[t_na_indexes])#
hist(tD$x3)
t_na_indexes=which(is.na(amp_dt$amp$x4))#
par(mfrow=c(2,2))#
hist(train$x4[t_na_indexes])#
hist(tD$x4)
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix[1]#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,20),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,20))#
names(tD)=c('x1','x2','x3','x4','x5')#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)#
t_na_indexes=which(is.na(amp_dt$amp$x4))#
par(mfrow=c(2,2))#
hist(train$x4[t_na_indexes])#
hist(tD$x4)
par(mfrow=c(2,2))#
hist(train$x2[t_na_indexes])#
hist(tD$x2)
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix[1]#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,3)+x3+skew_left(x4,2)+convert_counts(x5,20),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,3),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,20))#
names(tD)=c('x1','x2','x3','x4','x5')#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)#
t_na_indexes=which(is.na(amp_dt$amp$x4))#
par(mfrow=c(2,2))#
hist(train$x2[t_na_indexes])#
hist(tD$x2)
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
library(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
rockLabel
tVRock
tSinatraLabel
sinatraLabel
tVSinatra
tFRF
music.pred
38+47
tOut
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
library(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
pca1<-prcomp(tData[,1:35976])
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
library(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
require(stats)
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tListCorrect
length(tListCorrect))
length(tListCorrect)
length(tListInCorrect)
tListInCorrect
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:10],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:10];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
tListCorrect
tListInCorrect
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:10];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:10],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:10]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
tListInCorrect
sum(tListInCorrect)
tListCorrect
sum(tListCorrect)
133/(133+867)
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:6];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:6];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
39=44
39+44
dim(pca)
setwd('/Users/peterstafford/generalassembly/music_classification_repo/music_classification')#
### line 2 - 11 loads in the file names for the rock .wav files#
tN<-"music/rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-""#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
require(ModelMetrics)#
tN<-"music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
### line 20 - 27 loads in the file names for the easy listening .wav files#
#
tR<-""#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#### - this code is commented out. The abridge version does not use the .wav file.#
### It used the principle components derived from the wave files via melfcc #
# numOfSec<-30;#
# #tSample<-20000;#
# tSample<-20000;#
# tFrom<-round(1323000);#
# tTo<-round(2646000);#
# tFilename<-tVRock[1];#
# tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
# #tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
# #tW<-randomizeWave(tW,numOfSec);#
 # #show(tW)#
 # df<-mono(tW, which = c("left"))#
 # m1 <- melfcc(df)#
 # tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
## The code below process the .wav file. It extracts features based on the melfcc format. This section is for rock #
# tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
# tRockLength<-vector();#
# for(i in 1:length(tVRock))#
# {#
	   # tFilename<-tVRock[i];#
	   # #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   # #tW<-randomizeWave(tW,numOfSec);#
	   # #tW<-downsample(tW,tSample)#
	   # #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   # tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   # tW<-downsample(tW,tSample);#
	   # #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   # tChannel='both';#
	   # if(length(tW@right)==0)#
	   # {#
	   	   # tChannel='left';#
	   # }#
       # #show(tW)#
       # df<-mono(tW, which = c(tChannel))#
       # #show(tW)#
       # m1 <- melfcc(df)#
       # dta1<-deltas(m1);#
       # v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       # v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       # v1<-c(v1,v2);#
   # tNA<-which(is.na(v1))#
       # v1[tNA]=0;     #
   # tRockMtrx[i,]<-v1;    #
# }#
## The section process the easy listening audio#
# tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
# tSinatraLength<-vector();#
# for(i in 1:length(tVSinatra))#
# {#
	   # tFilename<-tVSinatra[i];#
	   # #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   # #tW<-randomizeWave(tW,numOfSec);#
	   # #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   # tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   # tW<-downsample(tW,tSample);#
	   # #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   # tChannel='both';#
	   # if(length(tW@right)==0)#
	   # {#
	   	   # tChannel='left';#
	   # }#
       # #show(tW)#
       # df<-mono(tW, which = c(tChannel))#
       # m1 <- melfcc(df)#
       # #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       # dta1<-deltas(m1);#
       # v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       # v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       # v1<-c(v1,v2);#
   # tNA<-which(is.na(v1))#
       # v1[tNA]=0;           #
   # tSinatraMtrx[i,]<-v1;    #
# }#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
#tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
#pca1<-prcomp(tData[,1:35976])#
#
#tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
#pca<-pca1$x[,1:6];#
load('principal_components.rdata') #
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
tPred=NULL#
tActual=NULL#
for(i in 1:1000)#
{#
	#randomly leave 5 out.   #
	tOut<-sample(1:79,5);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    tPred=c(tPred,as.numeric(music.pred))#
    tActual=c(tActual,as.numeric(tFactor[tOut]))#
}#
caret::confusionMatrix(as.factor(tPred),as.factor(tActual),mode="everything")
load('principal_components.rdata')
dim(pca)
setwd('/Users/peterstafford/generalassembly/music_classification_repo/music_classification')#
### line 2 - 11 loads in the file names for the rock .wav files#
tN<-"music/rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-""#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
require(ModelMetrics)#
tN<-"music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
### line 20 - 27 loads in the file names for the easy listening .wav files#
#
tR<-""#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}
setwd('/Users/peterstafford/generalassembly/music_classification_repo/music_classification')#
### line 2 - 11 loads in the file names for the rock .wav files#
tN<-"/music/rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-""#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
require(ModelMetrics)#
tN<-"/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
### line 20 - 27 loads in the file names for the easy listening .wav files#
#
tR<-""#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}
pwd
getpwd()
getpd()
setwd('/Users/peterstafford/generalassembly/music_classification_repo/music_classification')
getwd()
setwd('/Users/peterstafford/generalassembly/music_classification_repo/music_classification')#
### line 2 - 11 loads in the file names for the rock .wav files#
tN<-"music/rock.csv"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-""#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
require(ModelMetrics)#
tN<-"music/sinatra.csv"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
### line 20 - 27 loads in the file names for the easy listening .wav files#
#
tR<-""#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}
setwd('/Users/peterstafford/generalassembly/music_classification_repo/music_classification')#
### line 2 - 11 loads in the file names for the rock .wav files#
tN<-"music/rock.csv"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-""#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
require(ModelMetrics)#
tN<-"music/sinatra.csv"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
### line 20 - 27 loads in the file names for the easy listening .wav files#
#
tR<-""#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#### - this code is commented out. The abridge version does not use the .wav file.#
### It used the principle components derived from the wave files via melfcc #
# numOfSec<-30;#
# #tSample<-20000;#
# tSample<-20000;#
# tFrom<-round(1323000);#
# tTo<-round(2646000);#
# tFilename<-tVRock[1];#
# tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
# #tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
# #tW<-randomizeWave(tW,numOfSec);#
 # #show(tW)#
 # df<-mono(tW, which = c("left"))#
 # m1 <- melfcc(df)#
 # tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
## The code below process the .wav file. It extracts features based on the melfcc format. This section is for rock #
# tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
# tRockLength<-vector();#
# for(i in 1:length(tVRock))#
# {#
	   # tFilename<-tVRock[i];#
	   # #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   # #tW<-randomizeWave(tW,numOfSec);#
	   # #tW<-downsample(tW,tSample)#
	   # #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   # tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   # tW<-downsample(tW,tSample);#
	   # #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   # tChannel='both';#
	   # if(length(tW@right)==0)#
	   # {#
	   	   # tChannel='left';#
	   # }#
       # #show(tW)#
       # df<-mono(tW, which = c(tChannel))#
       # #show(tW)#
       # m1 <- melfcc(df)#
       # dta1<-deltas(m1);#
       # v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       # v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       # v1<-c(v1,v2);#
   # tNA<-which(is.na(v1))#
       # v1[tNA]=0;     #
   # tRockMtrx[i,]<-v1;    #
# }#
## The section process the easy listening audio#
# tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
# tSinatraLength<-vector();#
# for(i in 1:length(tVSinatra))#
# {#
	   # tFilename<-tVSinatra[i];#
	   # #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   # #tW<-randomizeWave(tW,numOfSec);#
	   # #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   # tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   # tW<-downsample(tW,tSample);#
	   # #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   # tChannel='both';#
	   # if(length(tW@right)==0)#
	   # {#
	   	   # tChannel='left';#
	   # }#
       # #show(tW)#
       # df<-mono(tW, which = c(tChannel))#
       # m1 <- melfcc(df)#
       # #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       # dta1<-deltas(m1);#
       # v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       # v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       # v1<-c(v1,v2);#
   # tNA<-which(is.na(v1))#
       # v1[tNA]=0;           #
   # tSinatraMtrx[i,]<-v1;    #
# }#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
#tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
#pca1<-prcomp(tData[,1:35976])#
#
#tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
#pca<-pca1$x[,1:6];#
load('principal_components.rdata') #
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
tPred=NULL#
tActual=NULL#
for(i in 1:1000)#
{#
	#randomly leave 5 out.   #
	tOut<-sample(1:79,5);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    tPred=c(tPred,as.numeric(music.pred))#
    tActual=c(tActual,as.numeric(tFactor[tOut]))#
}#
caret::confusionMatrix(as.factor(tPred),as.factor(tActual),mode="everything")
